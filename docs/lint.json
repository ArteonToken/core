[
  {
    "name": "updateLocals",
    "filePath": "src/global-scope.js",
    "lines": [
      {
        "lineNumber": 105,
        "line": "/**\r"
      },
      {
        "lineNumber": 106,
        "line": " * last resolved, mined or minted block\r"
      },
      {
        "lineNumber": 107,
        "line": " *\r"
      },
      {
        "lineNumber": 108,
        "line": " * @param {object} cid - cid instance or baseEncodedString \r"
      },
      {
        "lineNumber": 109,
        "line": " */\r"
      },
      {
        "lineNumber": 110,
        "line": "const updateLocals = async (cid, index) => {\r"
      }
    ],
    "codeParams": [
      "cid",
      "index"
    ],
    "docParams": [
      "cid"
    ]
  },
  {
    "name": "DAGBlock#newBlock",
    "filePath": "src/lib/dagchain/dagblock.js",
    "lines": [
      {
        "lineNumber": 17,
        "line": "\t/**\r"
      },
      {
        "lineNumber": 18,
        "line": "\t * Create new block\r"
      },
      {
        "lineNumber": 19,
        "line": "\t *\r"
      },
      {
        "lineNumber": 20,
        "line": "\t * @param transactions {array}\r"
      },
      {
        "lineNumber": 21,
        "line": "\t * @param previousBlock {object}\r"
      },
      {
        "lineNumber": 22,
        "line": "\t * @param address {string}\r"
      },
      {
        "lineNumber": 23,
        "line": "\t * @return {index, prevHash, time, transactions, nonce}\r"
      },
      {
        "lineNumber": 24,
        "line": "\t */\r"
      },
      {
        "lineNumber": 25,
        "line": "\tasync newBlock({transactions = [], previousBlock, address}) {\r"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "transactions",
      "previousBlock",
      "address"
    ]
  },
  {
    "name": "DAGChain#newDAGChain",
    "filePath": "src/lib/dagchain/dagchain.js",
    "lines": [
      {
        "lineNumber": 155,
        "line": "   // TODO: switch to itx\r"
      },
      {
        "lineNumber": 156,
        "line": "  async newDAGChain() {\r"
      }
    ],
    "codeParams": [],
    "docParams": [
      "block"
    ]
  },
  {
    "name": "Miner#mineBlock",
    "filePath": "src/lib/miner.js",
    "lines": [
      {
        "lineNumber": 98,
        "line": "  /**\r"
      },
      {
        "lineNumber": 99,
        "line": "   * Mine a block in separate process\r"
      },
      {
        "lineNumber": 100,
        "line": "   *\r"
      },
      {
        "lineNumber": 101,
        "line": "   * @param transactions Transactions list to add to the block\r"
      },
      {
        "lineNumber": 102,
        "line": "   * @param lastBlock Last block in the blockchain\r"
      },
      {
        "lineNumber": 103,
        "line": "   * @param difficulty Current difficulty\r"
      },
      {
        "lineNumber": 104,
        "line": "   * @param address Addres for reward transaction\r"
      },
      {
        "lineNumber": 105,
        "line": "   * @return {*}\r"
      },
      {
        "lineNumber": 106,
        "line": "   */\r"
      },
      {
        "lineNumber": 107,
        "line": "  async mineBlock(difficulty, address, job) {\r"
      }
    ],
    "codeParams": [
      "difficulty",
      "address",
      "job"
    ],
    "docParams": [
      "transactions",
      "lastBlock",
      "difficulty",
      "address"
    ]
  },
  {
    "name": "validateTransaction",
    "filePath": "src/lib/transaction.js",
    "lines": [
      {
        "lineNumber": 13,
        "line": "/**\r"
      },
      {
        "lineNumber": 14,
        "line": " * validate transaction\r"
      },
      {
        "lineNumber": 15,
        "line": " *\r"
      },
      {
        "lineNumber": 16,
        "line": " * @param transaction\r"
      },
      {
        "lineNumber": 17,
        "line": " * @param unspent\r"
      },
      {
        "lineNumber": 18,
        "line": " */\r"
      },
      {
        "lineNumber": 19,
        "line": "export const validateTransaction = async (multihash, transaction, unspent) => {\r"
      }
    ],
    "codeParams": [
      "multihash",
      "transaction",
      "unspent"
    ],
    "docParams": [
      "transaction",
      "unspent"
    ]
  },
  {
    "name": "createRewardTransaction",
    "filePath": "src/lib/transaction.js",
    "lines": [
      {
        "lineNumber": 123,
        "line": "/**\r"
      },
      {
        "lineNumber": 124,
        "line": " * Create reward transaction for block mining\r"
      },
      {
        "lineNumber": 125,
        "line": " *\r"
      },
      {
        "lineNumber": 126,
        "line": " * @param {string} address\r"
      },
      {
        "lineNumber": 127,
        "line": " * @return {id: string, reward: boolean, inputs: *, outputs: *, hash: string}\r"
      },
      {
        "lineNumber": 128,
        "line": " */\r"
      },
      {
        "lineNumber": 129,
        "line": "export const createRewardTransaction = async (address, height) => {\r"
      }
    ],
    "codeParams": [
      "address",
      "height"
    ],
    "docParams": [
      "address"
    ]
  },
  {
    "name": "createInput",
    "filePath": "src/lib/transaction.js",
    "lines": [
      {
        "lineNumber": 138,
        "line": "/**\r"
      },
      {
        "lineNumber": 139,
        "line": " * Create and sign input\r"
      },
      {
        "lineNumber": 140,
        "line": " *\r"
      },
      {
        "lineNumber": 141,
        "line": " * @param transaction Based on transaction id\r"
      },
      {
        "lineNumber": 142,
        "line": " * @param index Based on transaction output index\r"
      },
      {
        "lineNumber": 143,
        "line": " * @param amount\r"
      },
      {
        "lineNumber": 144,
        "line": " * @param wallet\r"
      },
      {
        "lineNumber": 145,
        "line": " * @return {transaction, index, amount, address}\r"
      },
      {
        "lineNumber": 146,
        "line": " */\r"
      },
      {
        "lineNumber": 147,
        "line": "const createInput = (tx, index, amount, wallet) => {\r"
      }
    ],
    "codeParams": [
      "tx",
      "index",
      "amount",
      "wallet"
    ],
    "docParams": [
      "transaction",
      "index",
      "amount",
      "wallet"
    ]
  },
  {
    "name": "buildTransaction",
    "filePath": "src/lib/transaction.js",
    "lines": [
      {
        "lineNumber": 160,
        "line": "/**\r"
      },
      {
        "lineNumber": 161,
        "line": " * Create a transaction\r"
      },
      {
        "lineNumber": 162,
        "line": " *\r"
      },
      {
        "lineNumber": 163,
        "line": " * @param wallet\r"
      },
      {
        "lineNumber": 164,
        "line": " * @param toAddress\r"
      },
      {
        "lineNumber": 165,
        "line": " * @param amount\r"
      },
      {
        "lineNumber": 166,
        "line": " * @param unspent\r"
      },
      {
        "lineNumber": 167,
        "line": " * @return {id, reward, inputs, outputs, hash,}\r"
      },
      {
        "lineNumber": 168,
        "line": " */\r"
      },
      {
        "lineNumber": 169,
        "line": "export const buildTransaction = async (wallet, toAddress, amount) => {\r"
      }
    ],
    "codeParams": [
      "wallet",
      "toAddress",
      "amount"
    ],
    "docParams": [
      "wallet",
      "toAddress",
      "amount",
      "unspent"
    ]
  },
  {
    "name": "allowFailureUntillEnough",
    "filePath": "src/utils.js",
    "lines": [
      {
        "lineNumber": 200,
        "line": "/**\r"
      },
      {
        "lineNumber": 201,
        "line": " * allow retry upto \"amount\" times\r"
      },
      {
        "lineNumber": 202,
        "line": " * @param {number} amount\r"
      },
      {
        "lineNumber": 203,
        "line": " */\r"
      },
      {
        "lineNumber": 204,
        "line": "export const allowFailureUntillEnough = (func, amount = 5) => new Promise(async (resolve, reject) => {\r"
      }
    ],
    "codeParams": [
      "func",
      "amount"
    ],
    "docParams": [
      "amount"
    ]
  }
]